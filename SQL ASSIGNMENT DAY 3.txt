-- Create MEMBER2 table
CREATE TABLE MEMBER2 (
    MEMBER_ID NUMBER(5) PRIMARY KEY,
    MEMBER_NAME VARCHAR2(30) NOT NULL,
    MEMBER_ADDRESS VARCHAR2(50),
    ACC_OPEN_DATE DATE NOT NULL,
    MEMBERSHIP_TYPE VARCHAR2(20) CHECK (MEMBERSHIP_TYPE IN ('Lifetime','Annual','Half Yearly','Quarterly')),
    FEES_PAID NUMBER(4) DEFAULT 0,
    MAX_BOOKS_ALLOWED NUMBER(2) DEFAULT 0,
    PENALTY_AMOUNT NUMBER(7,2) DEFAULT 0
);

INSERT INTO MEMBER2 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (1, 'Richa Sharma', 'Mumbai', DATE '2006-01-05', 'Lifetime', 5000, 10, 0);

INSERT INTO MEMBER2 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (2, 'Garima', 'Delhi', DATE '2006-06-15', 'Annual', 2000, 5, 50);

INSERT INTO MEMBER2 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (3, 'Anil Kumar', 'Chennai', DATE '2007-03-10', 'Half Yearly', 1500, 3, 0);

INSERT INTO MEMBER2 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (4, 'Priya Singh', 'Bangalore', DATE '2006-12-01', 'Quarterly', 1000, 2, 25);

INSERT INTO MEMBER2 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (5, 'Vikram', 'Hyderabad', DATE '2008-07-20', 'Annual', 2000, 4, 0);

INSERT INTO MEMBER2 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (6, 'Neha', 'Pune', DATE '2006-12-05', 'Lifetime', 5000, 8, 0);

SELECT * FROM MEMBER2;

-- Create BOOKS_NEW1 table
CREATE TABLE BOOKS_NEW1 (
    BOOK_NO NUMBER(6) PRIMARY KEY,
    BOOK_NAME VARCHAR2(30) NOT NULL,
    AUTHOR_NAME VARCHAR2(30),
    COST NUMBER(7,2) DEFAULT 0,
    CATEGORY CHAR(10)
);

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (101, 'Database Concepts', 'Scott Urman', 350, 'Database');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (102, 'Advanced Java', 'Loni', 250, 'Programming');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (103, 'Fictional Tales', 'Kiran', 150, 'Fiction');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (104, 'Physics Basics', 'Einstein', 400, 'Science');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (105, 'Chemistry 101', 'Marie', 300, 'Science');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (106, 'Python Programming', 'Loni', 280, 'Programming');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (107, 'World History', 'Scott Urman', 500, 'History');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (108, 'Fiction Adventures', 'Kiran', 200, 'Fiction');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (109, 'Database Advanced', 'Scott Urman', 450, 'Database');

INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (110, 'Math for Science', 'Einstein', 350, 'Science');

SELECT * FROM BOOKS_NEW1;


-- Create ISSUE_NEW1 table
CREATE TABLE ISSUE_NEW1 (
    LIB_ISSUE_ID NUMBER(10) PRIMARY KEY,
    BOOK_NO NUMBER(6) NOT NULL,
    MEMBER_ID NUMBER(5) NOT NULL,
    ISSUE_DATE DATE NOT NULL,
    RETURN_DATE DATE,
    CONSTRAINT FK_ISSUE_BOOK FOREIGN KEY (BOOK_NO) REFERENCES BOOKS_NEW1(BOOK_NO),
    CONSTRAINT FK_ISSUE_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER2(MEMBER_ID)
);

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1001, 101, 1, DATE '2023-12-02', DATE '2023-12-10');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1002, 102, 2, DATE '2023-12-05', DATE '2023-12-15');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1003, 103, 1, DATE '2023-07-10', DATE '2023-07-20');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1004, 104, 3, DATE '2023-12-12', DATE '2023-12-20');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1005, 105, 1, DATE '2023-07-15', DATE '2023-07-25');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1006, 106, 4, DATE '2023-12-18', DATE '2023-12-28');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1007, 107, 2, DATE '2023-07-20', DATE '2023-07-30');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1008, 108, 5, DATE '2023-12-22', DATE '2023-12-30');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1009, 109, 1, DATE '2023-12-24', DATE '2023-12-31');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1010, 110, 6, DATE '2023-07-05', DATE '2023-07-15');

SELECT * FROM ISUE_NEW1;

--QUERY 1--
SELECT CATEGORY, COUNT(*) AS BOOK_COUNT FROM BOOKS_NEW1 GROUP BY CATEGORY;

--QUERY 2--
SELECT BOOK_NO, COUNT(*) AS ISSUE_COUNT FROM ISSUE_NEW1 GROUP BY BOOK_NO ORDER BY ISSUE_COUNT DESC;

--QUERY 3--
SELECT MAX(PENALTY_AMOUNT) AS MAX_PENALTY, MIN(PENALTY_AMOUNT) AS MIN_PENALTY, SUM(PENALTY_AMOUNT) AS TOTAL_PENALTY,
AVG(PENALTY_AMOUNT) AS AVG_PENALTY FROM MEMBER2;

--QUERY 4--
SELECT MEMBER_ID, COUNT(*) AS NO_OF_BOOKS FROM ISSUE_NEW1 GROUP BY MEMBER_ID HAVING COUNT(*) > 2;

--QUERY 5--
SELECT MEMBER_ID, BOOK_NO, COUNT(*) AS ISSUE_COUNT FROM ISSUE_NEW1 GROUP BY MEMBER_ID, BOOK_NO ORDER BY ISSUE_COUNT DESC;

--QUERY 6--
SELECT TO_CHAR(ISSUE_DATE, 'Month') AS ISSUE_MONTH, COUNT(*) AS NO_OF_BOOKS FROM ISSUE_NEW1
GROUP BY TO_CHAR(ISSUE_DATE, 'Month')
ORDER BY NO_OF_BOOKS DESC;

--QUERY 7--
SELECT BOOK_NO FROM BOOKS_NEW1
WHERE BOOK_NO NOT IN (SELECT BOOK_NO FROM ISSUE_NEW1);

--QUERY 8--
SELECT DISTINCT M.MEMBER_ID FROM MEMBER2 M INNER JOIN ISSUE_NEW1 I
ON M.MEMBER_ID = I.MEMBER_ID;

--QUERY 9--
-- Member with highest number of books issued
SELECT MEMBER_ID, COUNT(*) AS NO_OF_BOOKS FROM ISSUE_NEW1 GROUP BY MEMBER_ID
ORDER BY COUNT(*) DESC
FETCH FIRST 1 ROWS ONLY;  -- ROWNUM CONCEPT IS USED HERE--

-- Member with lowest number of books issued
SELECT MEMBER_ID, COUNT(*) AS NO_OF_BOOKS FROM ISSUE_NEW1 GROUP BY MEMBER_ID
ORDER BY COUNT(*) ASC
FETCH FIRST 1 ROWS ONLY;

--QUERY 10--(HERE TRIM IS USED AS IF THERE IS SPACE BETWEEN THE DECEMBER AND QUOTES ITS SHOWING
--NO ITEMS TO DISPLAY)--
SELECT * FROM ISSUE_NEW1 WHERE TRIM(TO_CHAR(ISSUE_DATE, 'Month')) IN ('December', 'July');

--QUERY 11--
SELECT I.BOOK_NO, B.BOOK_NAME, I.ISSUE_DATE FROM ISSUE_NEW1 I
JOIN BOOKS_NEW1 B ON I.BOOK_NO = B.BOOK_NO
WHERE TRIM(TO_CHAR(I.ISSUE_DATE, 'Month')) = 'December' AND B.CATEGORY = 'Database';

--QUERY 12--
SELECT M.MEMBER_ID, M.MEMBER_NAME, COUNT(I.BOOK_NO) AS NO_OF_BOOKS FROM MEMBER2 M
JOIN ISSUE_NEW1 I ON M.MEMBER_ID = I.MEMBER_ID
GROUP BY M.MEMBER_ID, M.MEMBER_NAME
ORDER BY NO_OF_BOOKS DESC;

--QUERY 13--
SELECT I.BOOK_NO, B.BOOK_NAME, I.ISSUE_DATE, I.RETURN_DATE FROM ISSUE_NEW1 I
JOIN BOOKS_NEW1 B ON I.BOOK_NO = B.BOOK_NO
JOIN MEMBER2 M ON I.MEMBER_ID = M.MEMBER_ID WHERE M.MEMBER_NAME = 'Richa Sharma';

--QUERY 14--
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBER_ADDRESS, M.ACC_OPEN_DATE, 
M.MEMBERSHIP_TYPE, M.FEES_PAID, M.MAX_BOOKS_ALLOWED, M.PENALTY_AMOUNT
FROM MEMBER2 M 
JOIN ISSUE_NEW1 I ON M.MEMBER_ID = I.MEMBER_ID
JOIN BOOKS_NEW1 B ON I.BOOK_NO = B.BOOK_NO
WHERE B.CATEGORY = 'Database';

--QUERY 15--
SELECT B.BOOK_NO, B.BOOK_NAME, B.AUTHOR_NAME, B.COST, B.CATEGORY FROM BOOKS_NEW1 B
WHERE B.COST = (
    SELECT MAX(COST)
    FROM BOOKS_NEW1
    WHERE CATEGORY = B.CATEGORY
);

--QUERY 16--
INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (1011, 105, 1, DATE '2005-12-01', DATE '2005-12-10');  

SELECT I.LIB_ISSUE_ID, I.BOOK_NO, I.MEMBER_ID, I.ISSUE_DATE, I.RETURN_DATE
FROM ISSUE_NEW1 I
JOIN MEMBER2 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE I.ISSUE_DATE < M.ACC_OPEN_DATE
   OR I.ISSUE_DATE > I.RETURN_DATE;


--QUERY 17--
SELECT MEMBER_ID, MEMBER_NAME FROM MEMBER2 
WHERE MEMBER_ID NOT IN (SELECT MEMBER_ID FROM ISSUE_NEW1);

--QUERY 18--
-- Suppose member 2 is allowed 2 books, insert 3rd issue

SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MAX_BOOKS_ALLOWED, COUNT(I.BOOK_NO) AS NO_OF_BOOKS_ISSUED
FROM MEMBER2 M
JOIN ISSUE_NEW1 I ON M.MEMBER_ID = I.MEMBER_ID
GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MAX_BOOKS_ALLOWED
HAVING COUNT(I.BOOK_NO) > M.MAX_BOOKS_ALLOWED;

--QUERY 19--
SELECT m.member_id, m.member_name FROM member2 m
JOIN issue_new1 i ON m.member_id = i.member_id
WHERE i.book_no IN (
    SELECT i2.book_no
    FROM issue_new1 i2
    JOIN member2 m2 ON i2.member_id = m2.member_id
    WHERE m2.member_name = 'Garima'
);

--QUERY 20--
SELECT * FROM BOOKS_NEW1;
INSERT INTO BOOKS_NEW1 (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (120, 'SQL GUIDE', 'Mark Allen', 550.00, 'Science');

INSERT INTO ISSUE_NEW1 (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (8001, 120, 1, DATE '2024-06-01', NULL);

SELECT b.Book_Name, b.Cost AS Price FROM  Books_NEW1 b JOIN  Issue_NEW1 i ON b.Book_No = i.Book_No
WHERE  i.Return_Date IS NULL AND (SYSDATE - i.Issue_Date) > 30;

--QUERY 21--
SELECT Author_name, Book_Name FROM Books_NEW1 WHERE Author_name IN ( SELECT Author_name
FROM BOOKS_NEW1 GROUP BY Author_name HAVING COUNT(*) > 1
);

--QUERY 22--
SELECT MEMBER_ID, MEMBER_NAME FROM MEMBER2 WHERE MEMBER_ID IN ( SELECT MEMBER_ID 
FROM ISSUE_NEW1 GROUP BY MEMBER_ID
HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM ISSUE_NEW1 GROUP BY MEMBER_ID )
);

SELECT MEMBER_ID , MEMBER_NAME FROM MEMBER2 WHERE MEMBER_ID IN(SELECT MEMBER_ID 
FROM ISSUE_NEW1 GROUP BY MEMBER_ID
HAVING  COUNT(*)=(SELECT MIN(COUNT(*))FROM ISSUE_NEW1 GROUP BY MEMBER_ID)
);

--QUERY 23--
SELECT * FROM BOOKS_NEW1 ORDER BY COST DESC
FETCH FIRST 3 ROWS ONLY;

--QUERY 24--
SELECT SUM(B.COST) AS Total_Cost FROM ISSUE_NEW1 I
JOIN BOOKS_NEW1 B ON I.BOOK_NO = B.BOOK_NO
WHERE I.RETURN_DATE IS NULL;

--QUERY 25--
SELECT B.BOOK_NO, B.BOOK_NAME, B.AUTHOR_NAME, B.COST, COUNT(*) AS Issue_Count
FROM ISSUE_NEW1 I JOIN BOOKS_NEW1 B ON I.BOOK_NO = B.BOOK_NO
GROUP BY B.BOOK_NO, B.BOOK_NAME, B.AUTHOR_NAME, B.COST
HAVING COUNT(*) = (SELECT MAX(CNT)
    FROM (
        SELECT COUNT(*) AS CNT
        FROM ISSUE_NEW1
        GROUP BY BOOK_NO
    )
);

--QUERY 26--
SELECT MEMBER_ID, MEMBER_NAME, MEMBERSHIP_TYPE 
FROM MEMBER2 
WHERE MEMBERSHIP_TYPE = 'Lifetime';

SELECT *  FROM ISSUE_NEW1 WHERE MEMBER_ID IN (
    SELECT MEMBER_ID 
    FROM MEMBER2 
    WHERE MEMBERSHIP_TYPE = 'Lifetime'
);

SELECT COUNT(*) AS Total_Books_Issued FROM ISSUE_NEW1 I
JOIN MEMBER2 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE M.MEMBERSHIP_TYPE = 'Lifetime';

--QUERY 27--
SELECT Membership_Type, COUNT(*) AS Total_Members FROM Member2
GROUP BY Membership_Type;

--QUERY 28--
SELECT m.Member_ID, m.Member_Name, m.Membership_Type, COUNT(i.Book_No) AS Total_Issues
FROM Member2 m JOIN Issue_New1 i ON m.Member_ID = i.Member_ID
GROUP BY m.Member_ID, m.Member_Name, m.Membership_Type
ORDER BY Total_Issues DESC
FETCH FIRST 5 ROWS ONLY;

--QUERY 29--
SELECT Member_ID,
       Member_Name,
       Membership_Type,
       Total_Issues
FROM (
    SELECT m.Member_ID,
           m.Member_Name,
           m.Membership_Type,
           COUNT(i.Book_No) AS Total_Issues,
           ROW_NUMBER() OVER (PARTITION BY m.Membership_Type
                              ORDER BY COUNT(i.Book_No) DESC) AS rn
    FROM MEMBER2 m
    JOIN Issue_New1 i 
         ON m.Member_ID = i.Member_ID
    GROUP BY m.Member_ID, m.Member_Name, m.Membership_Type
)
WHERE rn <= 3
ORDER BY Membership_Type, Total_Issues DESC;


--QUERY 30--
SELECT Member_ID, Member_Name, Membership_Type, ACC_OPEN_DATE FROM Member2 ORDER BY ACC_OPEN_Date ASC
FETCH FIRST 5 ROWS ONLY;

--QUERY 31--
SELECT m.Member_ID, m.Member_Name, m.Membership_Type, i.Issue_Date FROM Member2 m
JOIN Issue_New1 i ON m.Member_ID = i.Member_ID
WHERE i.Issue_Date BETWEEN DATE '2006-12-01' AND DATE '2006-12-31';

--QUERY 32--
SELECT m.MEMBER_ID, m.MEMBER_NAME, m.MEMBERSHIP_TYPE FROM MEMBER2 m
JOIN ISSUE_NEW1 i ON m.MEMBER_ID = i.MEMBER_ID
WHERE i.RETURN_DATE IS NULL;

--QUERY 33--
SELECT MEMBER_ID, MEMBER_NAME, MEMBERSHIP_TYPE, ACC_OPEN_DATE FROM MEMBER2
WHERE ACC_OPEN_DATE= (SELECT ACC_OPEN_DATE FROM MEMBER1 WHERE MEMBER_NAME = 'Garima'
);

 --QUERY 34--
SELECT DISTINCT m.member_id, m.member_name FROM member2 m, books_NEW1 b, issue_NEW1 i
WHERE m.member_id = i.member_id  AND b.book_no = i.book_no AND b.author_name = 'Loni'
AND TO_CHAR(i.issue_date, 'MM') = '12';

--QUERY 35--
SELECT b.author_name
FROM books_new1 b
JOIN issue_new1 i ON b.book_no = i.book_no
JOIN member2 m ON m.member_id = i.member_id
WHERE m.membership_type = 'Lifetime'
GROUP BY b.author_name
HAVING COUNT(*) = (
    SELECT MIN(cnt)
    FROM (
        SELECT COUNT(*) AS cnt
        FROM books_new1 b1
        JOIN issue_new1 i1 ON b1.book_no = i1.book_no
        JOIN member2 m1 ON m1.member_id = i1.member_id
        WHERE m1.membership_type = 'Lifetime'
        GROUP BY b1.author_name
    )
);

--QUERY 36--
SELECT b.author_name, COUNT(*) AS issue_count FROM issue_NEW1 i
JOIN member2 m ON i.member_id = m.member_id
JOIN books_NEW1 b ON i.book_no = b.book_no WHERE m.membership_type = 'Half Yearly'
GROUP BY b.author_name ORDER BY issue_count DESC
FETCH FIRST 3 ROWS ONLY;   

--QUERY 37--
SELECT b.book_no, b.book_name, COUNT(*) AS times_issued
FROM books_NEW1 b JOIN issue_NEW1 i ON b.book_no = i.book_no
JOIN member2 m ON i.member_id = m.member_id
WHERE m.membership_type = 'Annual'
GROUP BY b.book_no, b.book_name
ORDER BY times_issued DESC
FETCH FIRST 5 ROWS ONLY;

--QUERY 38--
SELECT DISTINCT m.member_name
FROM member m
JOIN issue_NEW1 i ON m.member_id = i.member_id
JOIN books_NEW1 b ON i.book_no = b.book_no
WHERE b.cost > 300 AND b.author_name = 'Scott Urman';

--QUERY 39--
SELECT m.membership_type AS "Member Type", b.category AS "Book Category",COUNT(*)AS "Count"
FROM member2 m JOIN issue_NEW1 i ON m.member_id = i.member_id JOIN books_NEW1 b ON i.book_no = b.book_no
GROUP BY m.membership_type, b.category ORDER BY m.membership_type, b.category;

--QUERY 40--
SELECT m.member_id, m.member_name FROM member2 m
JOIN ISSUE_NEW1 i ON m.member_id = i.member_id WHERE m.membership_type = 'Lifetime'
AND m.Acc_open_date BETWEEN DATE '2006-01-01' AND DATE '2006-12-31'
GROUP BY m.member_id, m.member_name
HAVING COUNT(i.book_no) = 1;
